name: Kyma
on:
  workflow_call: 
  workflow_dispatch:
    inputs: 
      containers:
        description: 'If true, build and push container images'
        type: boolean
        required: false
        default: true
      helm:
        description: 'If true, deploy or upgrade helm chart'
        type: boolean
        required: false
        default: true
  push:
    branches:
      - main

permissions:
  contents: read
  deployments: write

concurrency:
  group: kyma-${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  APP_NAME: v1
jobs:
  deploy:
    runs-on: ubuntu-latest
    container:
      image: sapmachine:ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      
      - uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'npm'
      - uses: ./.github/actions/kyma-setup
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          user: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          kube-config: ${{ secrets.KUBE_CONFIG }}
          
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - run: npm ci --omit=optional
      
      - name: Set release version
        shell: bash
        run: |
          # Get current git reference (branch, tag, or commit)
          if [ -n "$GITHUB_REF" ]; then
              REF="$GITHUB_REF"
          else
              REF="refs/heads/$(git rev-parse --abbrev-ref HEAD)"
          fi
          
          echo "Git reference: $REF"
          
          # Determine version based on ref type
          if [[ "$REF" == refs/tags/* ]]; then
              VERSION=$(echo "$REF" | sed 's|refs/tags/||' | sed 's/\./-/g')
              echo "Tag detected: $VERSION"
          elif [[ "$REF" == refs/heads/release/* ]]; then
              VERSION=$(echo "$REF" | sed 's|refs/heads/release/||' | sed 's/\./-/g')
              echo "Release branch detected: $VERSION"
          elif [[ "$REF" == refs/heads/feature/* ]]; then
              VERSION=$(echo "$REF" | sed 's|refs/heads/feature/||' | sed 's/\./-/g')
              echo "Feature branch detected: $VERSION"
          elif [[ "$REF" == refs/heads/main ]] || [[ "$REF" == refs/heads/master ]]; then
              VERSION="main"
              echo "Main branch detected: $VERSION"
          else
              VERSION=$(echo "$REF" | sed 's|refs/heads/||' | sed 's|/|-|g' | sed 's/\./-/g')
              echo "Other ref detected: $VERSION"
          fi
          
          # Sanitize version name for Kubernetes
          VERSION=$(echo "$VERSION" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          
          # Ensure version doesn't exceed Kubernetes name limits (63 characters)
          if [ ${#VERSION} -gt 63 ]; then
              VERSION="${VERSION:0:63}"
              VERSION=$(echo "$VERSION" | sed 's/-$//g')
          fi
          
          echo "Final sanitized version: $VERSION"
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Release version set to: $VERSION"
      
      - name: Set up Docker Buildx
        if: inputs.containers == true
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
            
      - name: Cache Docker layers
        if: inputs.containers == true
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Cache CDS build output
        uses: actions/cache@v4
        with:
          path: |
            gen/
            @cds-models/
          key: ${{ runner.os }}-cds-${{ hashFiles('**/*.cds', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-cds-
        
      - run: npm run build:containers -- --push 
        if: inputs.containers == true
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
          DOCKER_BUILDKIT: 1
          BUILDX_CACHE_FROM: type=local,src=/tmp/.buildx-cache
          BUILDX_CACHE_TO: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
      - name: Move Docker cache
        if: inputs.containers == true
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
          
      # if we did not build containers, we need to build the cds project for helm deployment
      - run: npx cds build --production
        if: inputs.containers == false

      - name: Cache Helm dependencies
        if: inputs.helm == true
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/helm
            ~/.local/share/helm
          key: ${{ runner.os }}-helm-${{ hashFiles('**/Chart.yaml', '**/Chart.lock') }}
          restore-keys: |
            ${{ runner.os }}-helm-

      - run: helm upgrade $RELEASE_VERSION ./gen/chart --install --namespace devspace --set global.image.tag=$RELEASE_VERSION
        if: inputs.helm == true
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}

      - uses: ./.github/actions/kyma-info
        if: always()
        with:
          app: ${{ env.APP_NAME }}
