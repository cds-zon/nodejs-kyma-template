# yaml-language-server: $schema=./values.schema.json

global:
  domain: c-127c9ef.stage.kyma.ondemand.com
  imagePullPolicy: Always
  imagePullSecret:
    name: docker-registry
  image:
    registry: scai-dev.common.repositories.cloud.sap/router
    tag: v1
srv:
  image:
    repository: api
  networkSecurity:
    allowNamespaceInternal: true
  bindings:
    auth:
      serviceInstanceName: identity
      parameters:
        credential-type: X509_GENERATED
        app-identifier: srv
    # destination:
    #   serviceInstanceName: destination
  env:
    - name: CDS_REQUIRES_AUTH_KIND
      value: "ias"
    - name: CDS_REQUIRES_DESTINATIONS_KIND
      value: "destinations"
  resources:
    limits:
      ephemeral-storage: 200M
      memory: 512M
    requests:
      ephemeral-storage: 100M
      cpu: 100m
      memory: 256M
  health:
    liveness:
      path: /health
    readiness:
      path: /health

approuter:
  # Use official SAP approuter image instead of our custom build
  image:
    repository: sapse/approuter
    tag: "20.7.0"
    # Override global registry to use Docker Hub instead of private registry
    registry: "docker.io"
  # Approuter runs on port 5000 by default
  port: 5000
  # SAP approuter image runs as user 'node' (non-numeric), need to specify numeric ID
  runAsUser: 1000
  bindings:
    auth:
      serviceInstanceName: "identity"
      parameters:
        credential-type: X509_GENERATED
        app-identifier: app
    destination:
      serviceInstanceName: "destination"

  resources:
    limits:
      ephemeral-storage: 100M
      memory: 256M
    requests:
      ephemeral-storage: 50M
      cpu: 50m
      memory: 128M
  health:
    liveness:
      path: /
    readiness:
      path: /

  # Environment variables for approuter configuration
  env:
    # TENANT_HOST_PATTERN: "^(.*)-{{ tpl .Values.global.domain . }}"
    # TENANT_MODE: "shared"
    OTEL_EXPORTER_OTLP_ENDPOINT: http://otlp-dashboard:18889
    OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
    OTEL_SERVICE_NAME: approuter
    OTEL_PROPAGATORS: tracecontext,baggage
    CORS: |
          [
            {
              "allowedOrigin":[
                                {
                                    "host":"{{ tpl .Values.global.domain . }}",
                                    "protocol":"https"
                                }
                              ],
              "allowedCredentials": true,
              "hostPattern":"^.*\\.{{ tpl .Values.global.domain . }}$",
              "uriPattern": "^/.*$",
              "allowedHeaders": [
                "Authorization",
                "Content-Type",
                "approuter-authorization",
                "Cache-Control",
                "Origin",
                "Access-Control-Request-Method",
                "Access-Control-Request-Headers",
                "x-approuter-authorization",
                "*"
              ],
              "allowedMethods": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "OPTIONS"
              ]
            }
          ]
    # Don't set XS_APP_CONFIG - let approuter use default /app/xs-app.json
    
    # CORS configuration using corsPolicy
  expose:
    corsPolicy:
      allowOrigins:
        - regex: ".*-approuter-{{ .Release.Namespace }}.{{ .Values.global.domain }}"
        - exact: "https://*.{{ tpl .Values.global.domain . }}"
        - exact: "http://localhost:9000"
        - exact: "http://localhost:4338"
        - exact: "http://localhost:4111"
      allowMethods:
        - "GET"
        - "POST"
        - "PUT"
        - "DELETE"
        - "OPTIONS"
        - "PATCH"
        - "HEAD"
      allowHeaders:
        - "*"
      allowCredentials: true
    # Mount configuration files from ConfigMaps to the working directory
  additionalVolumes:
    - name: xs-app-config
      configMap:
        name: "{{ .Release.Name }}-approuter-static-files"
      volumeMount:
        mountPath: /app/xs-app.json
        subPath: xs-app.json
        readOnly: true
    - name: index-html-config
      configMap:
        name: "{{ .Release.Name }}-approuter-static-files"
      volumeMount:
        mountPath: /app/index.html
        subPath: index.html
        readOnly: true
    - name: favicon-config
      configMap:
        name: "{{ .Release.Name }}-approuter-static-files"
      volumeMount:
        mountPath: /app/favicon.svg
        subPath: favicon.svg
        readOnly: true
    # destinations-config is generated by cds up -2 k8s, using backendDestinations , so not required unless we want to override the generated destinations.json
    # - name: destinations-config
    #   configMap:
    #     name: approuter-destinations
    #   volumeMount:
    #     mountPath: /app/destinations
    #     subPath: destinations
    #     readOnly: true
  envFrom:
    - configMapRef:
        name: "{{ .Release.Name }}-approuter-configmap"


############################# Application itself - to be replaced with actual application #############################
mastra:  
  networkSecurity:
    allowNamespaceInternal: true
    enabled: false
  image:
    registry: scai-dev.common.repositories.cloud.sap/agents
    repository: mastra
    tag: v2
  hpa:
    maxReplicas: 1
    minReplicas: 1


  port: 8080
  resources:
    limits:
      ephemeral-storage: 1Gi
      memory: 2Gi
    requests:
      ephemeral-storage: 100M
      cpu: 100m
      memory: 512M
  runAsUser: 1000
  health:
    liveness:
      path: /health
    readiness:
      path: /health
  bindings:
    destination:
      serviceInstanceName: "destination"
    auth:
      serviceInstanceName: "identity"
      parameters:
        credential-type: X509_GENERATED
        app-identifier: mastra
    db:
      serviceInstanceName: "postgres"
  env:
    MCP_SERVER_URL: http://mcp-router:5000
    NODE_ENV: development
    services__mcp-router__http__0: http://mcp-router:5000
    OPENAI_BASE_URL: http://ai-core-proxy.kyma-system.svc.cluster.local:3002
    OPENAI_API_KEY: dummy-api-key
    OTEL_EXPORTER_OTLP_ENDPOINT: http://otlp-dashboard:18889
    OTEL_SERVICE_NAME: mastra
    HOST: 0.0.0.0
    PORT: 8080
    SYNC_URL: "http://{{ .Release.Name }}-libsql:8080"
    DATABASE_DIR: .
    # # # # POSTGRES_URL: postgres://postgres:postgres@postgresql:5432/postgres
    pg: "false"
    # for now we only use remote libsql for sync vector
    # LIBSQL_DATABASE_URL: "libsql://v1-libsql:8080"
    # to be setup with ias bound credentials
    # LIBSQL_AUTH_TOKEN: ""
  # Additional volumes for entire app directory and temporary .env file
  additionalVolumes:
    # - name: mastra-app-storage
    #   persistentVolumeClaim:
    #     claimName: mastra-pvc # mastra-pvc
    #   volumeMount:
    #     mountPath: /usr/src/app/db
    # - name: mastra-app-storage-db
    #   persistentVolumeClaim:
    #     claimName: mastra-pvc-db
    #   volumeMount:
    #     mountPath: /usr/src/app/
    #     subPath: mastra.db
    # - name: mastra-app-storage-vector
    #   persistentVolumeClaim:
    #     claimName: mastra-pvc-vector
    #   volumeMount:
    #     mountPath: /usr/src/app/
    #     subPath: vector.db
    # - name: mastra-app-storage-memory
    #   persistentVolumeClaim:
    #     claimName: mastra-pvc-memory
    #   volumeMount:
    #     mountPath: /usr/src/app/.mastra/output/
    #     subPath: memory.db
    - name: mastra-env-config
      configMap:
        name: mastra-env-config
      volumeMount:
        mountPath: /usr/src/app/.env
        subPath: .env
  # otlp:
  #   metrics:
  #     enabled: true
  #     # Metrics endpoint
  #     endpoint: http://otlp-dashboard.kyma-system.svc.cluster.local:18889
  #   traces:
  #     enabled: true
  #     # Traces endpoint
  #     endpoint: http://otlp-dashboard.kyma-system.svc.cluster.local:18889
  #   logs:
  #     enabled: true
  #     # Logs endpoint
  #     endpoint: http://otlp-dashboard.kyma-system.svc.cluster.local:18889

  ############################# Service Instances #############################

identity:
  serviceOfferingName: identity
  servicePlanName: application
  parameters:
    displayName: "Chat Service ({{ .Release.Namespace }})"
    home-page: https://{{ .Release.Namespace }}.{{ .Values.global.domain }}
    multi-tenant: true
    oauth2-configuration:
      public-client: true
      token-policy:
        access-token-format: "jwt"
      redirect-uris:
        - https://*.{{ tpl .Values.global.domain . }}/login/callback
        - https://*.{{ tpl .Values.global.domain . }}/login/callback?authType=ias
        - https://*.{{ tpl .Values.global.domain . }}/user/me
        - http://localhost:9000/login/callback?authType=ias
        - http://localhost:4111/login/callback?authType=ias
        - http://localhost:5001/login/callback?authType=ias
        - http://localhost:8080/login/callback?authType=ias
        - http://localhost:5000/login/callback?authType=ias
        - http://localhost:8081/login/callback?authType=ias
        - http://localhost:5002/login/callback?authType=ias


      post-logout-redirect-uris:
        - https://*.{{ tpl .Values.global.domain . }}/*/logout.html
    xsuaa-cross-consumption: true
    provided-apis:
      - name: user-api
        type: public
      - name: mastra-api
        type: public

backendDestinations:
  user-api:
    service: srv
    forwardAuthToken: true
  mastra-api:
    service: mastra
    forwardAuthToken: true

destination:
  serviceOfferingName: destination
  servicePlanName: lite
  parameters:
    version: 1.0.0


# postgresql:
#   image:
#     repository: postgres:alpine
#     tag: latest
#   env:
#     POSTGRES_PASSWORD: postgres
#     POSTGRES_USER: postgres
#     POSTGRES_DB: postgres
#   resources:
#       limits:
#         memory: 512Mi
#         cpu: 500m
#       requests:
#         memory: 256Mi
#         cpu: 250m
#   port: 5432
#   additionalVolumes:
#     - name: postgresql-data
#       persistentVolumeClaim:
#         claimName: postgresql-pvc
#       volumeMount:
#         mountPath: /var/lib/postgresql/data
#         subPath: data
 
    
postgres:
  serviceOfferingName: postgresql-db
  servicePlanName: development

# libSQL server configuration (self-hosted)
libsql:
  enabled: true
  image:
    repository: tursodatabase/libsql-server
    tag: latest
    registry: ghcr.io
  networkSecurity:
    enabled: true
    allowNamespaceInternal: true
    additionalPorts: [5001]
  port: 8080 
  # Custom deployment template handles security context
  testConnection: true
  resources:
    limits:
      memory: 512Mi
      cpu: 500m
    requests:
      memory: 256Mi
      cpu: 250m
  env:
    SQLD_NODE: "primary"
    # SQLD_AUTH_JWT_KEY_FILE: "/home/.ssh/libsql.pub"
  additionalVolumes:
    - name: libsql-data
      persistentVolumeClaim:
        claimName: libsql-pvc
      volumeMount:
        mountPath: /var/lib/sqld
        subPath: data
    - name: libsql-keys
      secret:
        secretName: libsql-keys
      volumeMount:
        mountPath: /home/.ssh/libsql.pub
        subPath: libsql.pub
   