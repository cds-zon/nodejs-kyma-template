---
description: Task Management and Memory Bank System - Structured approach for tracking tasks, progress, and preserving development knowledge
alwaysApply: true
---

# Memory Bank & Task Management Rules

## For Each New Task:

### 1. Branch Management
- **REQUIRED**: Create a dedicated branch for the task using format: `task/[task-name]`
- Example: `task/auth-improvement`

### 2. Task Folder Structure
Create a folder with the following **REQUIRED** files:

```
.tasks/
├── [task-name]/
├──-- TASK_DEFINITION.md     # Task goals, requirements, and acceptance criteria
├──-- STATUS.md              # Current status and progress tracking
├──-- CHANGELOG.md           # Chronological log of changes and decisions
├──-- NOTES.md               # Additional notes, investigations, and findings
├──-- memory-bank/           # Memory bank folder for reusable knowledge
│    ├── 00_[initial-setup].md      # Timeline-ordered memory bank files
│    ├── 01_[implementation].md     # Use numeric prefixes for chronology
│    └── 02_[final-results].md      # Enables timeline view of work
├──-- artifacts/             # Code artifacts, prototypes, and working files
├──-- docs/                  # Drop-in folder for pasting files during work, you can find there specs, code snippet etc. 
└── [additional-files]/      # Other task-specific files
```

### 3. File Maintenance Rules
- **Update Frequency**: Update STATUS.md and CHANGELOG.md after each significant change
- **History Preservation**: NEVER modify historical entries - only append new information
- **Incremental Updates**: Document what happened, not what you plan to do
- **Mandatory Updates**: STATUS.md must reflect current state, CHANGELOG.md must log all decisions

### 4. Memory Bank System - ENHANCED
Save important findings to `memory-bank/` folder using **timeline prefixes**:

#### Timeline Naming Convention:
- **Format**: `[NN]_[descriptive-name].md` where NN is 00, 01, 02, etc.
- **Examples**:
  - `00_initial-research-findings.md`
  - `01_implementation-approach.md` 
  - `02_testing-results.md`
  - `03_final-architecture-decisions.md`

#### Content Categories:
- **Repository Knowledge**: Architecture decisions, patterns, best practices
- **Development Insights**: Solutions to common problems, debugging techniques
- **Investigation Results**: Research findings, performance analysis, security considerations
- **General Development**: Reusable code snippets, configuration templates
- **Timeline Documentation**: Chronological progression of work and decisions
- **Code Artifacts**: Reference implementations, prototypes, working examples

### 5. Documentation Standards - ENHANCED
- **Timestamps**: MANDATORY - Include creation date and last updated timestamps
- **Headers**: Use clear, descriptive titles with consistent formatting
- **References**: Link to related files, commits, PRs, or issues
- **Formatting**: Use markdown formatting for readability
- **Categories**: Tag entries with relevant categories (e.g., [SECURITY], [PERFORMANCE], [BUG-FIX])
- **Timeline Context**: In memory-bank files, reference previous/next files in sequence

#### Required Header Format:
```markdown
# [Title]

**Created**: YYYY-MM-DD  
**Last Updated**: YYYY-MM-DD  
**Category**: [CATEGORY]  
**Timeline**: [NN] of [TOTAL] - [Brief description of phase]

## Overview
[Content...]
```

### 6. Completion Process - ENHANCED
- **STATUS.md**: Update to COMPLETED status with final summary
- **CHANGELOG.md**: Add completion entry with outcomes and lessons learned
- **Memory Bank**: Create final summary file (e.g., `99_task-completion-summary.md`)
- **Follow-up**: Document any technical debt or follow-up tasks needed
- **Archive**: Move completed tasks to `.tasks/completed/` or mark clearly as done

### 7. Validation Checklist
Before considering a task complete, verify:
- [ ] All required files exist (TASK_DEFINITION.md, STATUS.md, CHANGELOG.md, NOTES.md)
- [ ] Memory bank files use timeline prefixes (00_, 01_, 02_, etc.)
- [ ] All files have proper timestamps and headers
- [ ] STATUS.md reflects current state accurately
- [ ] CHANGELOG.md has chronological entries for all major decisions
- [ ] Memory bank contains reusable knowledge for future reference
- [ ] Code artifacts are properly organized in artifacts/ folder if present
- [ ] Global documentation is stored in .cursor/rules/ not task folders
- [ ] Branch naming follows the required format

### 8. Documentation Storage Locations

#### Global Project Documentation
Store project-wide documentation and rules in:
```
.cursor/rules/           # Global project rules and guidelines
├── [domain].mdc        # Domain-specific rules (e.g., grant-management.mdc)
├── [feature].md        # Feature documentation and specifications
└── tasks-and-memory-bank.mdc  # This rule file
```

#### Task-Specific Documentation
Store task-related documentation in:
```
.tasks/[task-name]/
├── memory-bank/        # Reusable knowledge and learnings
├── artifacts/          # Code artifacts and working files
├── docs/               # Drop-in folder for pasting files during work
└── [core-files].md     # Required task documentation
```

#### Code Artifacts Organization
```
.tasks/[task-name]/artifacts/
├── [any-code-files]    # Drop any code artifacts here
├── [prototypes]        # Experimental implementations
├── [configs]           # Configuration files
└── [working-files]     # Any other working files
```

### 9. Common Violations to Avoid
- ❌ Missing required files (especially STATUS.md updates)
- ❌ Memory bank files without timeline prefixes
- ❌ Missing timestamps in documentation
- ❌ Modifying historical entries instead of appending
- ❌ Incomplete task folders with missing core files
- ❌ Non-descriptive file names that don't indicate content or sequence
- ❌ Code artifacts mixed with documentation without using artifacts/ folder
- ❌ Global documentation stored in task-specific folders